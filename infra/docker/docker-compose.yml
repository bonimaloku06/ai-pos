version: "3.9"

services:
  # Application Services
  api-core:
    build:
      context: ../../apps/api-core
      dockerfile: Dockerfile
    container_name: pharmacy-pos-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4000
      DATABASE_URL: postgresql://pharmacy:pharmacy123@postgres:5432/pharmacy_pos
      REDIS_URL: redis://redis:6379
      MEILI_HOST: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-masterKeyForDevelopment123}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin123
      S3_BUCKET: pharmacy-pos
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      FORECAST_SVC_URL: http://svc-forecast:8000
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_TRACING: ${ENABLE_TRACING:-false}
    ports:
      - "${API_PORT:-14000}:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  svc-forecast:
    build:
      context: ../../apps/svc-forecast
      dockerfile: Dockerfile
    container_name: pharmacy-pos-forecast
    environment:
      API_CORE_URL: http://api-core:4000
      API_CORE_TOKEN: ${API_CORE_TOKEN:-your-api-token}
      PORT: 8000
    ports:
      - "${FORECAST_PORT:-18000}:8000"
    depends_on:
      api-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
      target: development
    container_name: pharmacy-pos-web
    environment:
      VITE_API_URL: http://api-core:4000
    ports:
      - "${WEB_PORT:-15174}:5174"
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
    depends_on:
      api-core:
        condition: service_healthy
    restart: unless-stopped

  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    container_name: pharmacy-pos-db
    environment:
      POSTGRES_USER: pharmacy
      POSTGRES_PASSWORD: pharmacy123
      POSTGRES_DB: pharmacy_pos
    ports:
      - "${POSTGRES_PORT:-15433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pharmacy"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pharmacy-pos-redis
    ports:
      - "${REDIS_PORT:-16380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  meilisearch:
    image: getmeili/meilisearch:v1.10
    container_name: pharmacy-pos-search
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-masterKeyForDevelopment123}
      MEILI_ENV: development
    ports:
      - "${MEILI_PORT:-17701}:7700"
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: pharmacy-pos-storage
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "${MINIO_API_PORT:-19100}:9000"
      - "${MINIO_CONSOLE_PORT:-19101}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: pharmacy-pos-prometheus
    ports:
      - "${PROMETHEUS_PORT:-19091}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"

  grafana:
    image: grafana/grafana:latest
    container_name: pharmacy-pos-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-13002}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  mailhog:
    image: mailhog/mailhog:latest
    container_name: pharmacy-pos-mail
    ports:
      - "${MAILHOG_SMTP_PORT:-11026}:1025" # SMTP
      - "${MAILHOG_UI_PORT:-18026}:8025" # Web UI

volumes:
  postgres_data:
  redis_data:
  meilisearch_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: pharmacy-pos-network

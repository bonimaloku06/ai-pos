generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== User & Auth =====

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(CASHIER)
  storeId      String?  @map("store_id")
  store        Store?   @relation(fields: [storeId], references: [id])
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  sales              Sale[]
  auditLogs          AuditLog[]
  stockMovements     StockMovement[]
  purchaseOrders     PurchaseOrder[]
  goodsReceipts      GoodsReceipt[]
  refreshTokens      RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

// ===== Store =====

model Store {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users                 User[]
  sales                 Sale[]
  batches               Batch[]
  forecastParams        ForecastParam[]
  reorderSuggestions    ReorderSuggestion[]

  @@map("stores")
}

// ===== Product & Category =====

model Category {
  id        String   @id @default(cuid())
  name      String
  parentId  String?  @map("parent_id")
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model TaxClass {
  id        String   @id @default(cuid())
  name      String
  rate      Decimal  @db.Decimal(5, 4) // e.g., 0.2000 for 20%
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("tax_classes")
}

model ActiveIngredient {
  id        String   @id @default(cuid())
  name      String   @unique // e.g., "Acetylsalicylic Acid", "Paracetamol"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("active_ingredients")
}

model Product {
  id                 String        @id @default(cuid())
  name               String
  sku                String        @unique
  barcode            String?       @unique
  description        String?
  activeIngredientId String?       @map("active_ingredient_id")
  activeIngredient   ActiveIngredient? @relation(fields: [activeIngredientId], references: [id])
  dosage             String?       // e.g., "500mg", "100mg/5ml"
  unit               String        @default("unit") // unit, box, bottle, etc.
  packSize           Int           @default(1) @map("pack_size")
  categoryId         String?       @map("category_id")
  category           Category?     @relation(fields: [categoryId], references: [id])
  taxClassId         String?       @map("tax_class_id")
  taxClass           TaxClass?     @relation(fields: [taxClassId], references: [id])
  defaultRetailPrice Decimal?      @db.Decimal(12, 4) @map("default_retail_price") // Default retail price before tax
  status             ProductStatus @default(ACTIVE)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  batches            Batch[]
  stockMovements     StockMovement[]
  saleLines          SaleLine[]
  poLines            POLine[]
  grLines            GRLine[]
  priceRules         PriceRule[]
  reorderSuggestions ReorderSuggestion[]
  productSuppliers   ProductSupplier[]

  @@map("products")
}

enum ProductStatus {
  ACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

// ===== Inventory & Batches =====

model Batch {
  id          String    @id @default(cuid())
  productId   String    @map("product_id")
  product     Product   @relation(fields: [productId], references: [id])
  supplierId  String?   @map("supplier_id")
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  storeId     String    @map("store_id")
  store       Store     @relation(fields: [storeId], references: [id])
  batchNumber String?   @map("batch_number")
  expiryDate  DateTime? @map("expiry_date")
  unitCost    Decimal   @db.Decimal(12, 4) @map("unit_cost")
  qtyOnHand   Int       @default(0) @map("qty_on_hand")
  receivedAt  DateTime  @default(now()) @map("received_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  stockMovements StockMovement[]
  saleLines      SaleLine[]
  grLines        GRLine[]

  @@index([productId, expiryDate])
  @@index([storeId])
  @@map("batches")
}

model StockMovement {
  id          String             @id @default(cuid())
  productId   String             @map("product_id")
  product     Product            @relation(fields: [productId], references: [id])
  batchId     String?            @map("batch_id")
  batch       Batch?             @relation(fields: [batchId], references: [id])
  type        StockMovementType
  qty         Int
  fromLoc     String?            @map("from_loc")
  toLoc       String?            @map("to_loc")
  unitCost    Decimal?           @db.Decimal(12, 4) @map("unit_cost")
  refTable    String             @map("ref_table") // sales, grn, adjustment, etc.
  refId       String             @map("ref_id")
  notes       String?
  userId      String             @map("user_id")
  user        User               @relation(fields: [userId], references: [id])
  createdAt   DateTime           @default(now()) @map("created_at")

  @@index([productId])
  @@index([batchId])
  @@index([refTable, refId])
  @@map("stock_movements")
}

enum StockMovementType {
  RECEIVE        // GRN
  SALE           // POS
  RETURN         // Customer return
  ADJUSTMENT     // Manual adjustment
  TRANSFER       // Between stores
  WASTE          // Expiry/damage
}

// ===== Suppliers & Purchasing =====

model Supplier {
  id               String   @id @default(cuid())
  name             String
  contactPerson    String?  @map("contact_person")
  email            String?
  phone            String?
  address          String?
  leadTimeDays     Int      @default(7) @map("lead_time_days")
  deliveryDays     String[] @default([]) @map("delivery_days") // ["MON", "WED", "FRI"]
  deliverySchedule Json?    @map("delivery_schedule") // Enhanced delivery schedule config
  moq              Int?     @default(1) // Minimum Order Quantity
  currency         String   @default("USD")
  paymentTerms     String?  @map("payment_terms")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  batches            Batch[]
  purchaseOrders     PurchaseOrder[]
  reorderSuggestions ReorderSuggestion[]
  productSuppliers   ProductSupplier[]

  @@map("suppliers")
}

model ProductSupplier {
  id          String    @id @default(cuid())
  productId   String    @map("product_id")
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierId  String    @map("supplier_id")
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  unitCost    Decimal   @db.Decimal(12, 4) @map("unit_cost")
  moq         Int       @default(1) // Minimum Order Quantity
  isPrimary   Boolean   @default(false) @map("is_primary")
  lastOrdered DateTime? @map("last_ordered")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([productId, supplierId])
  @@index([productId])
  @@index([supplierId])
  @@map("product_suppliers")
}

model PurchaseOrder {
  id         String        @id @default(cuid())
  poNumber   String        @unique @map("po_number")
  supplierId String        @map("supplier_id")
  supplier   Supplier      @relation(fields: [supplierId], references: [id])
  status     POStatus      @default(DRAFT)
  totalCost  Decimal       @default(0) @db.Decimal(12, 4) @map("total_cost")
  expectedAt DateTime?     @map("expected_at")
  notes      String?
  createdBy  String        @map("created_by")
  creator    User          @relation(fields: [createdBy], references: [id])
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  lines         POLine[]
  goodsReceipts GoodsReceipt[]

  @@map("purchase_orders")
}

enum POStatus {
  DRAFT
  APPROVED
  SENT
  PARTIAL
  RECEIVED
  CANCELLED
}

model POLine {
  id        String   @id @default(cuid())
  poId      String   @map("po_id")
  po        PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  qty       Int
  unitCost  Decimal  @db.Decimal(12, 4) @map("unit_cost")
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("po_lines")
}

model GoodsReceipt {
  id         String   @id @default(cuid())
  grNumber   String   @unique @map("gr_number")
  poId       String?  @map("po_id")
  po         PurchaseOrder? @relation(fields: [poId], references: [id])
  refNo      String?  @map("ref_no") // Supplier invoice/delivery note
  receivedAt DateTime @default(now()) @map("received_at")
  notes      String?
  receivedBy String   @map("received_by")
  receiver   User     @relation(fields: [receivedBy], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")

  lines GRLine[]

  @@map("goods_receipts")
}

model GRLine {
  id        String   @id @default(cuid())
  grId      String   @map("gr_id")
  gr        GoodsReceipt @relation(fields: [grId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  batchId   String   @map("batch_id")
  batch     Batch    @relation(fields: [batchId], references: [id])
  qty       Int
  unitCost  Decimal  @db.Decimal(12, 4) @map("unit_cost")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("gr_lines")
}

// ===== Sales (POS) =====

model Sale {
  id             String        @id @default(cuid())
  saleNumber     String        @unique @map("sale_number")
  storeId        String        @map("store_id")
  store          Store         @relation(fields: [storeId], references: [id])
  cashierId      String        @map("cashier_id")
  cashier        User          @relation(fields: [cashierId], references: [id])
  subtotal       Decimal       @db.Decimal(12, 4)
  taxTotal       Decimal       @db.Decimal(12, 4) @map("tax_total")
  discountTotal  Decimal       @default(0) @db.Decimal(12, 4) @map("discount_total")
  total          Decimal       @db.Decimal(12, 4)
  paid           Decimal       @db.Decimal(12, 4)
  change         Decimal       @default(0) @db.Decimal(12, 4)
  paymentMethod  String        @map("payment_method") // CASH, CARD, etc.
  status         SaleStatus    @default(COMPLETED)
  refundedSaleId String?       @map("refunded_sale_id")
  refundedSale   Sale?         @relation("SaleRefund", fields: [refundedSaleId], references: [id])
  refunds        Sale[]        @relation("SaleRefund")
  notes          String?
  createdAt      DateTime      @default(now()) @map("created_at")

  lines SaleLine[]

  @@index([storeId])
  @@index([cashierId])
  @@index([createdAt])
  @@map("sales")
}

enum SaleStatus {
  COMPLETED
  REFUNDED
  VOIDED
}

model SaleLine {
  id        String   @id @default(cuid())
  saleId    String   @map("sale_id")
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  batchId   String?  @map("batch_id")
  batch     Batch?   @relation(fields: [batchId], references: [id])
  qty       Int
  unitPrice Decimal  @db.Decimal(12, 4) @map("unit_price")
  taxRate   Decimal  @db.Decimal(5, 4) @map("tax_rate")
  discount  Decimal  @default(0) @db.Decimal(12, 4)
  lineTotal Decimal  @db.Decimal(12, 4) @map("line_total")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sale_lines")
}

// ===== Pricing =====

model PriceRule {
  id           String          @id @default(cuid())
  scope        PriceRuleScope  @default(PRODUCT)
  scopeId      String?         @map("scope_id") // Product/Category ID
  product      Product?        @relation(fields: [scopeId], references: [id])
  ruleType     PriceRuleType   @map("rule_type")
  value        Decimal         @db.Decimal(12, 4)
  roundingMode RoundingMode    @default(NEAREST_99) @map("rounding_mode")
  startDate    DateTime?       @map("start_date")
  endDate      DateTime?       @map("end_date")
  isActive     Boolean         @default(true) @map("is_active")
  priority     Int             @default(0)
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  @@index([scope, scopeId])
  @@map("price_rules")
}

enum PriceRuleScope {
  GLOBAL
  CATEGORY
  PRODUCT
}

enum PriceRuleType {
  MARKUP_PERCENT  // Add % on cost
  FIXED_PRICE     // Set exact price
  DISCOUNT        // Discount %
}

enum RoundingMode {
  NONE
  NEAREST_99      // 9.99, 19.99
  NEAREST_95      // 9.95, 19.95
  NEAREST_50      // 9.50, 10.00
  ROUND_UP
  ROUND_DOWN
}

// ===== Forecasting & Replenishment =====

model ForecastParam {
  id              String   @id @default(cuid())
  storeId         String   @unique @map("store_id")
  store           Store    @relation(fields: [storeId], references: [id])
  serviceLevel    Decimal  @default(0.95) @db.Decimal(3, 2) @map("service_level")
  holidayCalendar String[] @default([]) @map("holiday_calendar") // ["2025-12-25", ...]
  horizonDays     Int      @default(30) @map("horizon_days")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("forecast_params")
}

model ReorderSuggestion {
  id                 String    @id @default(cuid())
  productId          String    @map("product_id")
  product            Product   @relation(fields: [productId], references: [id])
  storeId            String    @map("store_id")
  store              Store     @relation(fields: [storeId], references: [id])
  supplierId         String?   @map("supplier_id")
  supplier           Supplier? @relation(fields: [supplierId], references: [id])
  suggestionDate     DateTime  @default(now()) @map("suggestion_date")
  rop                Int       // Reorder Point
  orderQty           Int       @map("order_qty")
  reason             Json?     // JSON with forecast details
  status             String    @default("PENDING") // PENDING, APPROVED, REJECTED, ORDERED

  // New fields for enhanced AI recommendations
  analysisPeriodDays Int       @default(30) @map("analysis_period_days")
  stockDuration      Float?    @map("stock_duration") // Days of stock remaining
  urgencyLevel       String?   @map("urgency_level") // CRITICAL, WARNING, GOOD, OVERSTOCKED
  nextDeliveryDate   DateTime? @map("next_delivery_date")
  scenarios          Json?     // Array of quantity scenarios with projections

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([storeId, status])
  @@index([productId])
  @@index([urgencyLevel])
  @@map("reorder_suggestions")
}

// ===== Audit & Logging =====

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String   @map("actor_id")
  actor    User     @relation(fields: [actorId], references: [id])
  action   String   // CREATE, UPDATE, DELETE
  entity   String   // products, sales, etc.
  entityId String   @map("entity_id")
  diff     Json?    // Before/after diff
  at       DateTime @default(now())

  @@index([entity, entityId])
  @@index([actorId])
  @@index([at])
  @@map("audit_logs")
}
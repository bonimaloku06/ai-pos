/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuppliersRouteImport } from './routes/suppliers'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as ReplenishmentRouteImport } from './routes/replenishment'
import { Route as PurchaseOrdersRouteImport } from './routes/purchase-orders'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as PosRouteImport } from './routes/pos'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InventoryRouteImport } from './routes/inventory'
import { Route as GrnRouteImport } from './routes/grn'
import { Route as ExpiryRouteImport } from './routes/expiry'
import { Route as AuditLogsRouteImport } from './routes/audit-logs'
import { Route as ActiveIngredientsRouteImport } from './routes/active-ingredients'
import { Route as IndexRouteImport } from './routes/index'

const SuppliersRoute = SuppliersRouteImport.update({
  id: '/suppliers',
  path: '/suppliers',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const ReplenishmentRoute = ReplenishmentRouteImport.update({
  id: '/replenishment',
  path: '/replenishment',
  getParentRoute: () => rootRouteImport,
} as any)
const PurchaseOrdersRoute = PurchaseOrdersRouteImport.update({
  id: '/purchase-orders',
  path: '/purchase-orders',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const PosRoute = PosRouteImport.update({
  id: '/pos',
  path: '/pos',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InventoryRoute = InventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => rootRouteImport,
} as any)
const GrnRoute = GrnRouteImport.update({
  id: '/grn',
  path: '/grn',
  getParentRoute: () => rootRouteImport,
} as any)
const ExpiryRoute = ExpiryRouteImport.update({
  id: '/expiry',
  path: '/expiry',
  getParentRoute: () => rootRouteImport,
} as any)
const AuditLogsRoute = AuditLogsRouteImport.update({
  id: '/audit-logs',
  path: '/audit-logs',
  getParentRoute: () => rootRouteImport,
} as any)
const ActiveIngredientsRoute = ActiveIngredientsRouteImport.update({
  id: '/active-ingredients',
  path: '/active-ingredients',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/active-ingredients': typeof ActiveIngredientsRoute
  '/audit-logs': typeof AuditLogsRoute
  '/expiry': typeof ExpiryRoute
  '/grn': typeof GrnRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/pos': typeof PosRoute
  '/pricing': typeof PricingRoute
  '/products': typeof ProductsRoute
  '/purchase-orders': typeof PurchaseOrdersRoute
  '/replenishment': typeof ReplenishmentRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/suppliers': typeof SuppliersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/active-ingredients': typeof ActiveIngredientsRoute
  '/audit-logs': typeof AuditLogsRoute
  '/expiry': typeof ExpiryRoute
  '/grn': typeof GrnRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/pos': typeof PosRoute
  '/pricing': typeof PricingRoute
  '/products': typeof ProductsRoute
  '/purchase-orders': typeof PurchaseOrdersRoute
  '/replenishment': typeof ReplenishmentRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/suppliers': typeof SuppliersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/active-ingredients': typeof ActiveIngredientsRoute
  '/audit-logs': typeof AuditLogsRoute
  '/expiry': typeof ExpiryRoute
  '/grn': typeof GrnRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/pos': typeof PosRoute
  '/pricing': typeof PricingRoute
  '/products': typeof ProductsRoute
  '/purchase-orders': typeof PurchaseOrdersRoute
  '/replenishment': typeof ReplenishmentRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/suppliers': typeof SuppliersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/active-ingredients'
    | '/audit-logs'
    | '/expiry'
    | '/grn'
    | '/inventory'
    | '/login'
    | '/pos'
    | '/pricing'
    | '/products'
    | '/purchase-orders'
    | '/replenishment'
    | '/reports'
    | '/settings'
    | '/suppliers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/active-ingredients'
    | '/audit-logs'
    | '/expiry'
    | '/grn'
    | '/inventory'
    | '/login'
    | '/pos'
    | '/pricing'
    | '/products'
    | '/purchase-orders'
    | '/replenishment'
    | '/reports'
    | '/settings'
    | '/suppliers'
  id:
    | '__root__'
    | '/'
    | '/active-ingredients'
    | '/audit-logs'
    | '/expiry'
    | '/grn'
    | '/inventory'
    | '/login'
    | '/pos'
    | '/pricing'
    | '/products'
    | '/purchase-orders'
    | '/replenishment'
    | '/reports'
    | '/settings'
    | '/suppliers'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActiveIngredientsRoute: typeof ActiveIngredientsRoute
  AuditLogsRoute: typeof AuditLogsRoute
  ExpiryRoute: typeof ExpiryRoute
  GrnRoute: typeof GrnRoute
  InventoryRoute: typeof InventoryRoute
  LoginRoute: typeof LoginRoute
  PosRoute: typeof PosRoute
  PricingRoute: typeof PricingRoute
  ProductsRoute: typeof ProductsRoute
  PurchaseOrdersRoute: typeof PurchaseOrdersRoute
  ReplenishmentRoute: typeof ReplenishmentRoute
  ReportsRoute: typeof ReportsRoute
  SettingsRoute: typeof SettingsRoute
  SuppliersRoute: typeof SuppliersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/suppliers': {
      id: '/suppliers'
      path: '/suppliers'
      fullPath: '/suppliers'
      preLoaderRoute: typeof SuppliersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/replenishment': {
      id: '/replenishment'
      path: '/replenishment'
      fullPath: '/replenishment'
      preLoaderRoute: typeof ReplenishmentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/purchase-orders': {
      id: '/purchase-orders'
      path: '/purchase-orders'
      fullPath: '/purchase-orders'
      preLoaderRoute: typeof PurchaseOrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pos': {
      id: '/pos'
      path: '/pos'
      fullPath: '/pos'
      preLoaderRoute: typeof PosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grn': {
      id: '/grn'
      path: '/grn'
      fullPath: '/grn'
      preLoaderRoute: typeof GrnRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/expiry': {
      id: '/expiry'
      path: '/expiry'
      fullPath: '/expiry'
      preLoaderRoute: typeof ExpiryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/audit-logs': {
      id: '/audit-logs'
      path: '/audit-logs'
      fullPath: '/audit-logs'
      preLoaderRoute: typeof AuditLogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/active-ingredients': {
      id: '/active-ingredients'
      path: '/active-ingredients'
      fullPath: '/active-ingredients'
      preLoaderRoute: typeof ActiveIngredientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActiveIngredientsRoute: ActiveIngredientsRoute,
  AuditLogsRoute: AuditLogsRoute,
  ExpiryRoute: ExpiryRoute,
  GrnRoute: GrnRoute,
  InventoryRoute: InventoryRoute,
  LoginRoute: LoginRoute,
  PosRoute: PosRoute,
  PricingRoute: PricingRoute,
  ProductsRoute: ProductsRoute,
  PurchaseOrdersRoute: PurchaseOrdersRoute,
  ReplenishmentRoute: ReplenishmentRoute,
  ReportsRoute: ReportsRoute,
  SettingsRoute: SettingsRoute,
  SuppliersRoute: SuppliersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
